二叉树（数组表示）
	数组与树之间的算法转换
	int tree[n] 3 5 8  2 6 9 7 父节点下标*2+1表示该节点左
			           父节点下标*2+2表示该节点右，如果没有节点就用0表示
		3[0]

	5[1]        8[2]

   2[3]  6[4]  9[5]   7[6]




树的基本操作：
1.树的创建和销毁
2.树中节点的搜索
3.树中节点的添加与删除
4.树中节点的遍历

bool createTree(Tree **pTree,Node *pRoot);
void destroyTree(Tree *pTree);
Node * searchNode(Tree *pTree,int nodeIndex);
bool addNode(Tree *pTree,int nodeIndex,int direction,Node *pNode);
bool deleteNode(Tree *pTree,int nodeIndex,Node *pNode);
void treeTraverse(Tree *pTree);

二叉树（用链表表示）

bool createTree(Tree **pTree,Node *pRoot);
void destroyTree(Tree *pTree);
Node * searchNode(Tree *pTree,int nodeIndex);
bool addNode(Tree *pTree,int nodeIndex,int direction,Node *pNode);
bool deleteNode(Tree *pTree,int nodeIndex,Node *pNode);
void treeTraverse(Tree *pTree);
void preorderTraverse();//前序遍历
void inorderTraverse();//中序遍历
void postorderTraverse();//后序遍历

           3[0]

	5[1]        8[2]

 2[3]  6[4]  9[5]   7[6]

前序遍历：0 1 3 4 2 5 6
中序遍历：3 1 4 0 5 2 6
后序遍历：3 4 1 5 6 2 0


